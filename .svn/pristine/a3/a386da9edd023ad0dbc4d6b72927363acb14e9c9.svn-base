package kr.or.ddit.Free.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.File.service.AtchFileService;
import kr.or.ddit.File.vo.AtchFileDtlVO;
import kr.or.ddit.File.vo.AtchFileVO;
import kr.or.ddit.Free.dao.FreeDao;
import kr.or.ddit.Free.vo.FreeBoardVO;
import kr.or.ddit.employee.vo.PaginationInfo;

@Service
public class FreeServeciImpl implements FreeService {
	@Inject
	private FreeDao freeDAO;
	/*
	 * @Inject private PasswordEncoder encoder;
	 */

	@Inject
	private AtchFileService atchService;
	@Value("#{appInfo.atchPath}")
	private Resource atchPath;

	@Override
	public List<FreeBoardVO> retrieveFreeBoardList(PaginationInfo<FreeBoardVO> paging) {
		long totalRecord = freeDAO.selectTotalRecord(paging);
		paging.setTotalRecord(totalRecord);
		return freeDAO.selectFreeBoardList(paging);
	}

	/*
	 * private void encryptBoard(FreeBoardVO board) { String plain =
	 * board.getEmpNo(); String encoded = encoder.encode(plain);
	 * board.setEmpNo(encoded); }
	 */
	private void processAtchFileGroup(FreeBoardVO board) {

		MultipartFile[] boardFiles = board.getBoardFiles();
		if (boardFiles == null)
			return; // 아예파일이 없을때

		List<AtchFileDtlVO> detailList = new ArrayList<>();
		for (MultipartFile boardFile : boardFiles) {
			if (boardFile.isEmpty())
				continue;
			detailList.add(new AtchFileDtlVO());
		}

		if (detailList.size() > 0) {
			AtchFileVO fileGroup = new AtchFileVO();
			fileGroup.setDetailList(detailList);

			try {
				// 1. 첨부파일의 메타 데이터 저저ㅏㅇ
				// 2. 첨부파일의 2진 데이터 저장
				int atchFileId = atchService.createAtchFileGroup(fileGroup, atchPath);
				board.setAtchFileId(atchFileId);
			} catch (IOException e) {
				// 첨부파일을 작성하다 실패
				throw new RuntimeException(e);
			}
		}
	}

	@Override
	public FreeBoardVO retrieveFreeBoard(String boardNo) {
		FreeBoardVO freeBoard = freeDAO.selectFreeBoard(boardNo);
		return freeBoard;
	}

	@Override
	public boolean createFreeBoard(FreeBoardVO freeBoard) {
		return freeDAO.insertFreeBoard(freeBoard) > 0;
	}

	

	@Override
	public boolean modifyFreeBoard(FreeBoardVO freeBoard) {
		return freeDAO.updateFreeBoard(freeDAO)>0;
	}

	@Override
	public boolean removeFreeBoard(String boardNo) {
		return freeDAO.deleteFreeBoard(boardNo)>0;
	}

	@Override
	public boolean modifyFreeBoardReadcount(String boardNo) {
		return freeDAO.updateFreeBoardReadcount(boardNo)>0;
	}

}
