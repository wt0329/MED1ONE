package kr.or.ddit.rez.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.medical.nurse.vo.ReservationVO;
import kr.or.ddit.rez.service.RezService;

@Controller
@RequestMapping("/rez")
public class RezListController {

	@Inject
	private RezService rezService;

	// 예약번호로 예약정보 가져오기
	@GetMapping(value = "selectRez.do", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<ReservationVO> selectRez(@RequestParam("resveNum") String resveNum) {

		// 예약번호로 예약 데이터 찾기
		List<ReservationVO> rezList = rezService.retrieveMyRez(resveNum);

		List<ReservationVO> uniqueRezList = new ArrayList<>();

		for (ReservationVO rez : rezList) {
			boolean isDuplicate = false;

			// 현재 검사 중인 rez 객체와 중복 여부를 확인
			for (ReservationVO uniqueRez : uniqueRezList) {
				if (rez.getResveNum().equals(uniqueRez.getResveNum())) {
					isDuplicate = true;
					break;
				}
			}

			// 중복이 아니라면 uniqueRezList에 추가
			if (!isDuplicate) {
				uniqueRezList.add(rez);
			}
		}

		System.out.println(uniqueRezList);

		return uniqueRezList;

	}

	// 예약 수정
	@RequestMapping("updateRez.do")
	public boolean updateRez(@RequestParam("resveDate") String resveDate, @RequestParam("resveNum") String resveNum,
			@RequestParam("fcltyCode") String fcltyCode, @RequestParam("resveTime") String resveTime,
			@RequestParam("resveEndtime") String resveEndtime, Model model) {

		boolean result = true;

		String convertDate = resveDate.replace("-", "");
		System.out.println("Converted Date: " + convertDate); // 출력 결과: Converted Date: 20230810

		boolean myRezConfirm = rezService.retriveUpdateRezConfirm(convertDate, fcltyCode, resveTime); // 동시간에 다른 사람 예약
																										// 여부 true 면 예약
																										// 가능

		boolean confirm = rezService.retriveUpdateMyRezConfirm(resveEndtime, fcltyCode, resveTime, convertDate); // 동시간에
																													// 내
																													// 예약
																													// 여부
																													// true
																													// 면
																													// 예약
																													// 가능

		if (!myRezConfirm) {
			System.out.println("선택한 일정으로 이미 예약되어 있습니다.");
			result = false;
			return result; // 조건 충족 시 함수 종료
		}

		if (!confirm) {
			System.out.println("선택한 일정은 진료 예약이 마감되었습니다. 다른 일정을 선택해주세요");
			result = false;
			return result; // 조건 충족 시 함수 종료
		}

		// 선택한 일정으로 예약이 가능할 경우 예약 변경 진행
		// 예약번호로 예약 데이터 찾기
		List<ReservationVO> rezList = rezService.retrieveMyRez(resveNum);

		List<ReservationVO> uniqueRezList = new ArrayList<>();

		for (ReservationVO rez : rezList) {
			boolean isDuplicate = false;

			// 현재 검사 중인 rez 객체와 중복 여부를 확인
			for (ReservationVO uniqueRez : uniqueRezList) {
				if (rez.getResveNum().equals(uniqueRez.getResveNum())) {
					isDuplicate = true;
					break;
				}
			}

			// 중복이 아니라면 uniqueRezList에 추가
			if (!isDuplicate) {
				uniqueRezList.add(rez);
			}
		}

		if (!uniqueRezList.isEmpty()) {
			uniqueRezList.get(0).setFcltyCode(fcltyCode); // 첫 번째 요소에 진료과 설정
			uniqueRezList.get(0).setResveDate(convertDate); // 첫 번째 요소에 예약일자 설정
			uniqueRezList.get(0).setResveTime(resveTime);// 예약시간
			uniqueRezList.get(0).setResveEndtime(resveEndtime);// 예약종료시간

			result = rezService.modifyRez(uniqueRezList.get(0));
		}

		if (result) {

			System.out.println("예약 수정 성공");
		} else {

			System.out.println("예약 수정 실패");
		}

		System.out.println("result>>>" + result);

		return result;

	}

	// 예약 삭제
	@RequestMapping("deleteRez.do")
	public String deleteRez(@RequestParam(name = "resveNum") String resveNum

	) {

		// 예약번호로 예약 데이터 찾기-> 날짜 리턴
		List<ReservationVO> rezList = rezService.retrieveMyRez(resveNum);

		List<ReservationVO> uniqueRezList = new ArrayList<>();

		for (ReservationVO rez : rezList) {
			boolean isDuplicate = false;

			// 현재 검사 중인 rez 객체와 중복 여부를 확인
			for (ReservationVO uniqueRez : uniqueRezList) {
				if (rez.getResveNum().equals(uniqueRez.getResveNum())) {
					isDuplicate = true;
					break;
				}
			}

			// 중복이 아니라면 uniqueRezList에 추가
			if (!isDuplicate) {
				uniqueRezList.add(rez);
			}
		}

		String resveDate = uniqueRezList.get(0).getResveDate();
		// 예약번호로 예약 데이터 찾기-> 날짜 리턴

		// 삭제작업 수행
		boolean result = rezService.removeRez(resveNum);
		System.out.println(result);
		
	   return resveDate;
}
	
	
	
	// 전체예약정보
	@RequestMapping("rezList.do")
	public void rezList(Model model) {
		List<ReservationVO> rezList = rezService.retriveAllRez();

		List<ReservationVO> uniqueRezList = new ArrayList<>();

		for (ReservationVO rez : rezList) {
			boolean isDuplicate = false;

			// 현재 검사 중인 rez 객체와 중복 여부를 확인
			for (ReservationVO uniqueRez : uniqueRezList) {
				if (rez.getResveNum().equals(uniqueRez.getResveNum())) {
					isDuplicate = true;
					break;
				}
			}

			// 중복이 아니라면 uniqueRezList에 추가
			if (!isDuplicate) {
				uniqueRezList.add(rez);
			}
		}

		model.addAttribute("rezList", uniqueRezList);
	}

	// 진료실 전체예약정보
	@GetMapping(value = "clinicRezList.do", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<ReservationVO> rezClinicList(

	) {
		List<ReservationVO> clinicRezList = rezService.retriveClinicAllRez();
		return clinicRezList;
	}

	// 검사실 전체예약정보
	@GetMapping(value = "examRezList.do", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<ReservationVO> rezExamList() {
		List<ReservationVO> examRezList = rezService.retriveExamAllRez();
		return examRezList;
	}

	// 특정일자, 특정과의 시간별 예약현황
	@RequestMapping("rezTimeList.do")
	public String rezClinicTimeList(@RequestParam("resveDate") String resveDate,
			@RequestParam("fcltyCode") String fcltyCode, Model model) {

		String convertDate = resveDate.replace("-", "");

		System.out.println("Converted Date: " + convertDate); // 출력 결과: Converted Date: 20230810

		System.out.println("fcltyCode" + fcltyCode);
		List<ReservationVO> rezTimeList = rezService.retriveTimeRez(convertDate, fcltyCode);
		model.addAttribute("rezList", rezTimeList);

		return "rez/rezList";

	}

	// 진료과별 예약현황
	@RequestMapping("rezFcltyList.do")
	public void rezFcltyList(@RequestParam("fcltyCode") String fcltyCode, Model model) {
		List<ReservationVO> rezFcltyList = rezService.retriveFcltyRez(fcltyCode);
		model.addAttribute("rezFcltyList", rezFcltyList);
	}

	// 예약환자 상세정보
	@GetMapping(value = "rezPatntInfo.do", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<ReservationVO> rezPatientInfo(@RequestParam("patntCode") String patntCode) {
		List<ReservationVO> rezPatienInfo = rezService.retrivePatntRez(patntCode);
		return rezPatienInfo;
	}

	// 날짜별 진료과 예약 time table
	@GetMapping(value = "clinicTimeTable.do", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<ReservationVO> clinicTimeTable(@RequestParam("resveDate") String resveDate) {

		String date = resveDate.replace("-", "");
		System.out.println("date 변환 결과 >>>>" + date);

		List<ReservationVO> timeTable = rezService.retriveClinicTimeTable(date);

		List<ReservationVO> clinicConvertTimeTable = convertClinicObject(timeTable);
		System.out.println("convertTimeTable>>>>>>>>>>>>>>>>>" + clinicConvertTimeTable);
		return clinicConvertTimeTable;
	}

	// 날짜별 검사과 예약 time table
	@GetMapping(value = "examTimeTable.do", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<ReservationVO> examTimeTable(@RequestParam("resveDate") String resveDate) {

		String date = resveDate.replace("-", "");
		System.out.println("date 변환 결과 >>>>" + date);
		List<ReservationVO> timeTable = rezService.retriveExamTimeTable(date);
		List<ReservationVO> examConvertTimeTable = convertExamObject(timeTable);
		System.out.println("convertTimeTable>>>>>>>>>>>>>>>>>" + examConvertTimeTable);
		return examConvertTimeTable;
	}

	// clinic 타임테이블용 메소드 convertTimeTable 리턴
	public List<ReservationVO> convertClinicObject(List<ReservationVO> timeTable) {

		List<ReservationVO> convertTimeTable = new ArrayList<>(); // 리스트 초기화

		for (ReservationVO vo : timeTable) {
			// String vo.getResveTime() = vo.getResveTime().substring(0, 2) + ":" +
			// vo.getResveTime().substring(2);
			// String formattedEndTime = vo.getResveEndtime().substring(0, 2) + ":" +
			// vo.getResveEndtime().substring(2);

			String patntCode = vo.getPatntCode();
			String patntNm = vo.getPatntNm();
			vo.setPatntNm(patntNm + "님(" + patntCode + ")");

			// 시작시간세팅
			if (vo.getResveTime().equals("0800")) {
				vo.setResveTime("eight");
			}

			if (vo.getResveTime().equals("0900")) {
				vo.setResveTime("nine");
			}

			if (vo.getResveTime().equals("1000")) {
				vo.setResveTime("ten");
			}

			if (vo.getResveTime().equals("1100")) {
				vo.setResveTime("eleven");
			}

			if (vo.getResveTime().equals("1200")) {
				vo.setResveTime("twelve");
			}

			if (vo.getResveTime().equals("1300")) {
				vo.setResveTime("lunch");
			}

			if (vo.getResveTime().equals("1400")) {
				vo.setResveTime("fourteen");
			}

			if (vo.getResveTime().equals("1500")) {
				vo.setResveTime("fifteen");
			}

			if (vo.getResveTime().equals("1600")) {
				vo.setResveTime("sixteen");
			}

			if (vo.getResveTime().equals("1700")) {
				vo.setResveTime("seventeen");
			}

			if (vo.getResveTime().equals("1800")) {
				vo.setResveTime("eightteen");
			}

			// 종료시간세팅
			if (vo.getResveEndtime().equals("0800")) {
				vo.setResveEndtime("eight");
			}

			if (vo.getResveEndtime().equals("0900")) {
				vo.setResveEndtime("nine");
			}

			if (vo.getResveEndtime().equals("1000")) {
				vo.setResveEndtime("ten");
			}

			if (vo.getResveEndtime().equals("1100")) {
				vo.setResveEndtime("eleven");
			}

			if (vo.getResveEndtime().equals("1200")) {
				vo.setResveEndtime("twelve");
			}

			if (vo.getResveEndtime().equals("1300")) {
				vo.setResveEndtime("lunch");
			}

			if (vo.getResveEndtime().equals("1400")) {
				vo.setResveEndtime("fourteen");
			}

			if (vo.getResveEndtime().equals("1500")) {
				vo.setResveEndtime("fifteen");
			}

			if (vo.getResveEndtime().equals("1600")) {
				vo.setResveEndtime("sixteen");
			}

			if (vo.getResveEndtime().equals("1700")) {
				vo.setResveEndtime("seventeen");
			}

			if (vo.getResveEndtime().equals("1800")) {
				vo.setResveEndtime("eightteen");
			}

			if (vo.getFcltyCode().equals("A") || vo.getFcltyCode().equals("B") || vo.getFcltyCode().equals("F")
					|| vo.getFcltyCode().equals("D") || vo.getFcltyCode().equals("E") || vo.getFcltyCode().equals("C")
					|| vo.getFcltyCode().equals("G")) {

				if (vo.getFcltyCode().equals("A")) {
					vo.setFcltyNm("sunday");
				} else if (vo.getFcltyCode().equals("B")) {
					vo.setFcltyNm("monday");
				} else if (vo.getFcltyCode().equals("F")) {
					vo.setFcltyNm("tuesday");
				} else if (vo.getFcltyCode().equals("D")) {
					vo.setFcltyNm("wednesday");
				} else if (vo.getFcltyCode().equals("E")) {
					vo.setFcltyNm("thursday");
				} else if (vo.getFcltyCode().equals("C")) {
					vo.setFcltyNm("friday");
				}
			} else {
				vo.setFcltyNm("saturday");
			}

			convertTimeTable.add(vo); // 리스트에 아이템 추가
		}

		return convertTimeTable;

	}

	// exam타임테이블용 메소드 convertTimeTable 리턴
	public List<ReservationVO> convertExamObject(List<ReservationVO> timeTable) {

		List<ReservationVO> convertTimeTable = new ArrayList<>(); // 리스트 초기화

		for (ReservationVO vo : timeTable) {
			// String vo.getResveTime() = vo.getResveTime().substring(0, 2) + ":" +
			// vo.getResveTime().substring(2);
			// String formattedEndTime = vo.getResveEndtime().substring(0, 2) + ":" +
			// vo.getResveEndtime().substring(2);

			String patntCode = vo.getPatntCode();
			String patntNm = vo.getPatntNm();
			vo.setPatntNm(patntNm + "님(" + patntCode + ")");

			// 시작시간세팅
			if (vo.getResveTime().equals("0800")) {
				vo.setResveTime("eight");
			}

			if (vo.getResveTime().equals("0900")) {
				vo.setResveTime("nine");
			}

			if (vo.getResveTime().equals("1000")) {
				vo.setResveTime("ten");
			}

			if (vo.getResveTime().equals("1100")) {
				vo.setResveTime("eleven");
			}

			if (vo.getResveTime().equals("1200")) {
				vo.setResveTime("twelve");
			}

			if (vo.getResveTime().equals("1300")) {
				vo.setResveTime("lunch");
			}

			if (vo.getResveTime().equals("1400")) {
				vo.setResveTime("fourteen");
			}

			if (vo.getResveTime().equals("1500")) {
				vo.setResveTime("fifteen");
			}

			if (vo.getResveTime().equals("1600")) {
				vo.setResveTime("sixteen");
			}

			if (vo.getResveTime().equals("1700")) {
				vo.setResveTime("seventeen");
			}

			if (vo.getResveTime().equals("1800")) {
				vo.setResveTime("eightteen");
			}

			// 종료시간세팅
			if (vo.getResveEndtime().equals("0800")) {
				vo.setResveEndtime("eight");
			}

			if (vo.getResveEndtime().equals("0900")) {
				vo.setResveEndtime("nine");
			}

			if (vo.getResveEndtime().equals("1000")) {
				vo.setResveEndtime("ten");
			}

			if (vo.getResveEndtime().equals("1100")) {
				vo.setResveEndtime("eleven");
			}

			if (vo.getResveEndtime().equals("1200")) {
				vo.setResveEndtime("twelve");
			}

			if (vo.getResveEndtime().equals("1300")) {
				vo.setResveEndtime("lunch");
			}

			if (vo.getResveEndtime().equals("1400")) {
				vo.setResveEndtime("fourteen");
			}

			if (vo.getResveEndtime().equals("1500")) {
				vo.setResveEndtime("fifteen");
			}

			if (vo.getResveEndtime().equals("1600")) {
				vo.setResveEndtime("sixteen");
			}

			if (vo.getResveEndtime().equals("1700")) {
				vo.setResveEndtime("seventeen");
			}

			if (vo.getResveEndtime().equals("1800")) {
				vo.setResveEndtime("eightteen");
			}

			if (vo.getFcltyCode().equals("K") || vo.getFcltyCode().equals("L") || vo.getFcltyCode().equals("O")
					|| vo.getFcltyCode().equals("M") || vo.getFcltyCode().equals("N")
					|| vo.getFcltyCode().equals("H")) {

				if (vo.getFcltyCode().equals("K")) {
					vo.setFcltyNm("sunday");
				} else if (vo.getFcltyCode().equals("L")) {
					vo.setFcltyNm("monday");
				} else if (vo.getFcltyCode().equals("O")) {
					vo.setFcltyNm("tuesday");
				} else if (vo.getFcltyCode().equals("M")) {
					vo.setFcltyNm("wednesday");
				} else if (vo.getFcltyCode().equals("N")) {
					vo.setFcltyNm("thursday");
				} else if (vo.getFcltyCode().equals("H")) {
					vo.setFcltyNm("friday");
				}
			} else {
				vo.setFcltyNm("saturday");
			}

			convertTimeTable.add(vo); // 리스트에 아이템 추가
		}

		return convertTimeTable;

	}

}
